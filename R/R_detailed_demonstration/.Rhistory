View(ifnb.list)
# 寻找锚点
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list,
anchor.features = features)
library(Seurat)
library(SeuratData)
library(tidyverse)
# 下载演示数据----
#InstallData("ifnb")
data("ifnb")
count_ifnb = ifnb@assays$RNA$counts
meta_ifnb = ifnb@meta.data
View(count_ifnb)
library(pryr)
typeof(count_ifnb)
typeof(ifnb)
class(ifnb)
class(count_ifnb)
ifnb = CreateSeuratObject(count_ifnb)
ifnb[['stim']] = meta_ifnb$stim
rm(count_ifnb, meta_ifnb)
# 1. 数据预处理与质控 --------------------------
# 将数据拆分为stimulated和control两组
ifnb.list <- SplitObject(ifnb, split.by = "stim")
View(ifnb.list)
# 对每个组进行独立质控
for (i in 1:length(ifnb.list)) {
# 计算线粒体基因百分比
ifnb.list[[i]][["percent.mt"]] <- PercentageFeatureSet(ifnb.list[[i]], pattern = "^MT-")
# 过滤低质量细胞
ifnb.list[[i]] <- subset(ifnb.list[[i]],
subset = nFeature_RNA > 200 &
nFeature_RNA < 2500 &
percent.mt < 5)
# 数据归一化
ifnb.list[[i]] <- NormalizeData(ifnb.list[[i]], verbose = FALSE)
# 寻找高变基因
ifnb.list[[i]] <- FindVariableFeatures(ifnb.list[[i]], selection.method = "vst", nfeatures = 2000)
}
library(harmony)
help(RunHarmony)
###########################  harmony整合  ###########################
# 选择整合特征基因
ifnb=NormalizeData(ifnb) %>% FindVariableFeatures(nfeatures=3000) %>% ScaleData() %>% RunPCA(verbose=F)
ifnb=RunHarmony(scRNA,group.by.vars='stim',assay.use='RNA',max.iter.harmony=20)
ifnb=RunHarmony(ifnb,group.by.vars='stim',assay.use='RNA',max.iter.harmony=20)
rm(ifnb.list)
View(ifnb)
ifnb@reductions[["pca"]]@feature.loadings
atr(ifnb@reductions[["pca"]]@cell.embeddings)
str(ifnb@reductions[["pca"]]@cell.embeddings)
ElbowPlot(ifnb,ndims=50,reduction='harmony')
# 3. 降维与聚类 --------------------------
ifnb = RunTSNE(ifnb, reduction = 'harmony', dims = 1:20) %>% RunUMAP(reduction = 'harmony',dims = 1:20)
View(ifnb)
# 4. 差异表达分析 --------------------------
# 设置默认分组
Idents(ifnb) = ifnb$stim
ifnb = FindNeighbors(ifnb, dims = 1:20, reduction = 'harmony') %>% FindClusters(resolution = 0.3)
library(SingleR)
# 4.细胞注释
gene.markers.TBNM=c(
"CD3D","CD3E","CD3G", #T cell
"IL7R","CCR7","S100A4", #CD4
"CD79A","CD79B","MS4A1", #B cell
"NKG7","GZMB","GNLY", #NK cell
"CST3","LYZ","CD68","FCGR3A" #Myeloid cell
)
for(gene in gene.markers.TBNM){
print(gene %in% rownames(ifnb))
}
set.seed(2024)
subobj=subset(ifnb, downsample = 300)
DoHeatmap(subobj,features =gene.markers.TBNM)+NoLegend()
############################  singleR  ############################
ref1 = celldex::MonacoImmuneData()
pred.scRNA = SingleR(test = ifnb@assays$RNA$scale.data, ref = ref1, labels = ref1$label.fine,
clusters = ifnb@active.ident)
pred.scRNA$pruned.labels
new.cluster.ids = pred.scRNA$pruned.labels
names(new.cluster.ids) = levels(ifnb)
ifnb = RenameIdents(ifnb, new.cluster.ids)
View(ifnb)
UMAPPlot(ifnb)
View(pred.scRNA)
# 5. 差异细胞比例分析
Idents(ifnb)
# 5. 差异细胞比例分析
as.character(Idents(ifnb))
# 5. 差异细胞比例分析
data_analysis = data.frame(as.character(Idents(ifnb)), ifnb$stim)
View(ifnb)
View(data_analysis)
sample(1:5, 10)
sample(1:5, 10, replace = T)
View(data_analysis)
table(data_analysis$ifnb.stim)
View(data_analysis)
table(data_analysis$ifnb.stim[1:6548])
sample(1:5, 6548, replace = T)
table(data_analysis$ifnb.stim[6549:])
table(data_analysis$ifnb.stim[6549:13999])
table(c(sample(1:5, 6548, replace = T), sample(6:10, 7451, replace = T)))
set.seed(2024)
ID = c(sample(1:5, 6548, replace = T), sample(6:10, 7451, replace = T))
data_analysis = data.frame(as.character(Idents(ifnb)), ifnb$stim, ID)
View(data_analysis)
table(data_analysis$ifnb.stim[1:6548])
table(data_analysis$ID[1:6548])
table(data_analysis$ID[6549:13999])
View(data_analysis)
names(data_analysis) = c("cell", "intervention", "ID")
data_analysis = data.frame(as.character(Idents(ifnb)), ifnb$stim, as.character(ID))
names(data_analysis) = c("cell", "intervention", "ID")
str(data_analysis)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell)
View(cell_proportions)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop')
View(cell_proportions)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 填充可能缺失的细胞类型组合（设为0）
complete(ID, intervention, cell, fill = list(count = 0))
View(cell_proportions)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention)
View(cell_proportions)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention) %>%
mutate(total = sum(count))
View(cell_proportions)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention) %>%
mutate(total = sum(count)) %>%
# 计算比例
ungroup()
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention) %>%
mutate(total = sum(count)) %>%
# 计算比例
ungroup() %>%
mutate(proportion = count / total)
View(cell_proportions)
data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention) %>%
mutate(total = sum(count)) %>%
# 计算比例
#ungroup() %>%
mutate(proportion = count / total)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention) %>%
mutate(total = sum(count)) %>%
# 计算比例
#ungroup() %>%
mutate(proportion = count / total) %>%
# 移除总数列
select(-total)
View(cell_proportions)
test_results <- cell_proportions %>%
# 按细胞类型分组
group_by(cell) %>%
# 执行Wilcoxon秩和检验
summarise(
p_value = tryCatch({
wilcox.test(proportion ~ intervention, exact = FALSE)$p.value
}, error = function(e) NA_real_))
View(test_results)
test_results <- cell_proportions %>%
# 按细胞类型分组
group_by(cell) %>%
# 执行Wilcoxon秩和检验
summarise(
p_value = tryCatch({
wilcox.test(proportion ~ intervention, exact = FALSE)$p.value
}, error = function(e) NA_real_)) %>%
# 移除NA值
filter(!is.na(p_value))
test_results <- cell_proportions %>%
# 按细胞类型分组
group_by(cell) %>%
# 执行Wilcoxon秩和检验
summarise(
p_value = tryCatch({
wilcox.test(proportion ~ intervention, exact = FALSE)$p.value
}, error = function(e) NA_real_)) %>%
# 移除NA值
filter(!is.na(p_value)) %>%
# 多重检验校正
mutate(
fdr = p.adjust(p_value, method = "BH"),
bonferroni = p.adjust(p_value, method = "bonferroni")
) %>%
# 按FDR值排序
arrange(fdr)
# 6. 差异表达分析 --------------------------
# 设置默认分组
Idents(ifnb) = ifnb$stim
View(ifnb)
cluster.markers <- FindAllMarkers(combined,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25)
cluster.markers <- FindAllMarkers(ifnb,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25)
View(cluster.markers)
help(FindAllMarkers)
cluster.markers <- FindAllMarkers(ifnb,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25,
test.use = "DESeq2")
View(cluster.markers)
View(cluster.markers)
View(cluster.markers)
# 加载包----
library(Seurat)
library(SeuratData)
library(tidyverse)
library(harmony)
library(SingleR)
library(Seurat)
library(SeuratData)
library(tidyverse)
library(harmony)
library(SingleR)
# 读入数据----
data1 = Read10X("0.data/data_sc_1_GSE291735/")
View(data1)
typeof(data1)
c(1,2,3,4)
Seurat_data1 = CreateSeuratObject(data1)
View(Seurat_data1)
data2 = read.table("0.data/data_sc_2/counts.txt")
View(data2)
Seurat_data2 = CreateSeuratObject(data2, min.cells = 3)
help(CreateSeuratObject)
View(Seurat_data2)
data3 = Read10X_h5('0.data/data_sc_3/sc_tumor.h5')
View(data3)
Seurat_data3 = CreateSeuratObject(data3)
View(Seurat_data3)
Convert('0.data/data_sc_4/data.h5ad',dest="h5seurat", assay = "RNA",overwrite = F)
reticulate::repl_python()
1
import pandas as pd
import scanpy as sc
annData = sc.read_h5ad("0.data/data_sc_4/data.h5ad")
metadata = annData.obs
View(metadata)
quit
Seurat_data4 = LoadH5Seurat('0.data/data_sc_4/data.h5seurat',meta.data = T)
??LoadH5Seurat
library(SeuratDisk)
library(SeuratDisk)
Convert('0.data/data_sc_4/data.h5ad',dest="h5seurat", assay = "RNA",overwrite = F)
Seurat_data4 = LoadH5Seurat('0.data/data_sc_4/data.h5seurat',meta.data = T)
View(Seurat_data4)
reticulate::repl_python()
1
quit
1
View(Seurat_data4)
data("ifnb")
View(ifnb)
View(ifnb)
View(ifnb)
count_ifnb = ifnb@assays$RNA$counts
meta_ifnb = ifnb@meta.data
ifnb = CreateSeuratObject(count_ifnb)
View(ifnb)
rm(count_ifnb, meta_ifnb)
View(ifnb)
View(ifnb)
meta_ifnb = ifnb@meta.data
View(meta_ifnb)
ifnb[['stim']] = meta_ifnb$stim
# 下载演示数据----
#InstallData("ifnb")
data("ifnb")
count_ifnb = ifnb@assays$RNA$counts
meta_ifnb = ifnb@meta.data
# 下载演示数据----
#InstallData("ifnb")
data("ifnb")
count_ifnb = ifnb@assays$RNA$counts
meta_ifnb = ifnb@meta.data
ifnb = CreateSeuratObject(count_ifnb)
ifnb[['stim']] = meta_ifnb$stim
rm(count_ifnb, meta_ifnb)
View(ifnb)
table(ifnb@meta.data[["stim"]])
View(ifnb)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
# 2. 整合
###########################  锚点整合  ###########################
# 对每个组进行独立质控
for (i in 1:length(ifnb.list)) {
# 计算线粒体基因百分比
ifnb.list[[i]][["percent.mt"]] <- PercentageFeatureSet(ifnb.list[[i]], pattern = "^MT-")
# 过滤低质量细胞
ifnb.list[[i]] <- subset(ifnb.list[[i]],
subset = nFeature_RNA > 200 &
nFeature_RNA < 2500 &
percent.mt < 5)
# 数据归一化
ifnb.list[[i]] <- NormalizeData(ifnb.list[[i]], verbose = FALSE)
# 寻找高变基因
ifnb.list[[i]] <- FindVariableFeatures(ifnb.list[[i]], selection.method = "vst", nfeatures = 2000)
}
View(ifnb.list)
rm(ifnb.list)
rm(i)
###########################  harmony整合  ###########################
# 选择整合特征基因
ifnb = NormalizeData(ifnb) %>% FindVariableFeatures(nfeatures=3000) %>% ScaleData() %>% RunPCA(verbose=F)
View(ifnb)
ifnb = RunHarmony(ifnb, group.by.vars='stim',assay.use='RNA',max.iter.harmony = 20)
ElbowPlot(ifnb,ndims=50,reduction='harmony')
View(ifnb)
# 3. 降维与聚类 --------------------------
ifnb = RunTSNE(ifnb, reduction = 'harmony', dims = 1:20) %>% RunUMAP(reduction = 'harmony',dims = 1:20)
View(ifnb)
ifnb = FindNeighbors(ifnb, dims = 1:20, reduction = 'harmony') %>% FindClusters(resolution = 0.3)
UMAPPlot(ifnb)
# 4.细胞注释
############################  手动注释  ############################
gene.markers.TBNM=c(
"CD3D","CD3E","CD3G", #T cell
"CD79A","CD79B","MS4A1", #B cell
"NKG7","GZMB","GNLY", #NK cell
"CST3","LYZ","CD68","FCGR3A" #Myeloid cell
)
set.seed(2024)
subobj=subset(ifnb, downsample = 300)
DoHeatmap(subobj,features =gene.markers.TBNM)+NoLegend()
############################  singleR  ############################
ref1 = celldex::MonacoImmuneData()
pred.scRNA = SingleR(test = ifnb@assays$RNA$scale.data, ref = ref1, labels = ref1$label.fine,
clusters = ifnb@active.ident)
new.cluster.ids = pred.scRNA$pruned.labels
names(new.cluster.ids) = levels(ifnb)
ifnb = RenameIdents(ifnb, new.cluster.ids)
View(ifnb)
ifnb[["cell_type"]] = Idents(ifnb)
UMAPPlot(ifnb)
View(ifnb)
# 5. 差异细胞比例分析
set.seed(2024)
ID = c(sample(1:5, 6548, replace = T), sample(6:10, 7451, replace = T))
data_analysis = data.frame(as.character(Idents(ifnb)), ifnb$stim, as.character(ID))
names(data_analysis) = c("cell", "intervention", "ID")
View(data_analysis)
sample(1:5, 6548, replace = T)
c(sample(1:5, 6548, replace = T),
sample(6:10, 7451, replace = T))
data_analysis = data.frame(as.character(Idents(ifnb)), ifnb$stim, as.character(ID))
names(data_analysis) = c("cell", "intervention", "ID")
cell_proportions <- data_analysis
View(cell_proportions)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop')
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention) %>%
mutate(total = sum(count)) %>%
)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention) %>%
mutate(total = sum(count))
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention) %>%
mutate(total = sum(count)) %>%
# 计算比例
ungroup() %>%
mutate(proportion = count / total)
cell_proportions <- data_analysis %>%
# 计算原始计数
group_by(ID, intervention, cell) %>%
summarise(count = n(), .groups = 'drop') %>%
# 计算总细胞数
group_by(ID, intervention) %>%
mutate(total = sum(count)) %>%
# 计算比例
ungroup() %>%
mutate(proportion = count / total) %>%
# 移除总数列
select(-total)
write.csv(cell_proportions, "1.tmp/cell_proportions.csv")
write.csv(cell_proportions, "1.tmp/cell_proportions.csv", row.names = F)
test_results <- cell_proportions
View(test_results)
test_results <- cell_proportions %>%
# 按细胞类型分组
group_by(cell) %>%
# 执行Wilcoxon秩和检验
summarise(
p_value = tryCatch({
wilcox.test(proportion ~ intervention, exact = FALSE)$p.value
}, error = function(e) NA_real_))
test_results <- cell_proportions %>%
# 按细胞类型分组
group_by(cell) %>%
# 执行Wilcoxon秩和检验
summarise(
p_value = tryCatch({
wilcox.test(proportion ~ intervention, exact = FALSE)$p.value
}, error = function(e) NA_real_)) %>%
# 移除NA值
filter(!is.na(p_value))
2^2
1 - 0.95
1 - 0.95 ^ 8
test_results <- cell_proportions %>%
# 按细胞类型分组
group_by(cell) %>%
# 执行Wilcoxon秩和检验
summarise(
p_value = tryCatch({
wilcox.test(proportion ~ intervention, exact = FALSE)$p.value
}, error = function(e) NA_real_)) %>%
# 移除NA值
filter(!is.na(p_value)) %>%
# 多重检验校正
mutate(
fdr = p.adjust(p_value, method = "BH"),
bonferroni = p.adjust(p_value, method = "bonferroni")
)
test_results <- cell_proportions %>%
# 按细胞类型分组
group_by(cell) %>%
# 执行Wilcoxon秩和检验
summarise(
p_value = tryCatch({
wilcox.test(proportion ~ intervention, exact = FALSE)$p.value
}, error = function(e) NA_real_)) %>%
# 移除NA值
filter(!is.na(p_value)) %>%
# 多重检验校正
mutate(
fdr = p.adjust(p_value, method = "BH"),
bonferroni = p.adjust(p_value, method = "bonferroni")
) %>%
# 按FDR值排序
arrange(fdr)
View(test_results)
View(ifnb)
View(test_results)
ifnb@meta.data[["cell_type"]]
# 6. 差异表达分析 --------------------------
# 设置默认分组
ifnb_mono = subset(ifnb, subset = cell_type == "Classical monocytes")
View(ifnb_mono)
table(ifnb_mono@meta.data[["cell_type"]])
View(ifnb_mono)
Idents(ifnb) = ifnb$stim
Idents(ifnb_mono) = ifnb_mono$stim
help(FindMarkers)
help(FindAllMarkers)
cluster.markers <- FindAllMarkers(ifnb_mono,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25,
test.use = "wilcox")
View(cluster.markers)
View(ifnb)
View(cluster.markers)
